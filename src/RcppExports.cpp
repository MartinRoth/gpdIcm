// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// MakeScaleAdmissible
NumericVector MakeScaleAdmissible(NumericVector scale, NumericVector y, double shape);
RcppExport SEXP gpdIcm_MakeScaleAdmissible(SEXP scaleSEXP, SEXP ySEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(MakeScaleAdmissible(scale, y, shape));
    return rcpp_result_gen;
END_RCPP
}
// compute_scalar_product
double compute_scalar_product(NumericVector a, NumericVector b);
RcppExport SEXP gpdIcm_compute_scalar_product(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_scalar_product(a, b));
    return rcpp_result_gen;
END_RCPP
}
// ComputeGradient
NumericVector ComputeGradient(NumericVector y, NumericVector scale, double shape);
RcppExport SEXP gpdIcm_ComputeGradient(SEXP ySEXP, SEXP scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeGradient(y, scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// ComputeHessianDiagonal
NumericVector ComputeHessianDiagonal(NumericVector y, NumericVector scale, double shape);
RcppExport SEXP gpdIcm_ComputeHessianDiagonal(SEXP ySEXP, SEXP scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeHessianDiagonal(y, scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// FitIsoScaleFixedPG
List FitIsoScaleFixedPG(NumericVector y, NumericVector scale, double shape, int max_repetitions);
RcppExport SEXP gpdIcm_FitIsoScaleFixedPG(SEXP ySEXP, SEXP scaleSEXP, SEXP shapeSEXP, SEXP max_repetitionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< int >::type max_repetitions(max_repetitionsSEXP);
    rcpp_result_gen = Rcpp::wrap(FitIsoScaleFixedPG(y, scale, shape, max_repetitions));
    return rcpp_result_gen;
END_RCPP
}
// generate_shape_grid
NumericVector generate_shape_grid(double from_, double to_, double by_);
RcppExport SEXP gpdIcm_generate_shape_grid(SEXP from_SEXP, SEXP to_SEXP, SEXP by_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type from_(from_SEXP);
    Rcpp::traits::input_parameter< double >::type to_(to_SEXP);
    Rcpp::traits::input_parameter< double >::type by_(by_SEXP);
    rcpp_result_gen = Rcpp::wrap(generate_shape_grid(from_, to_, by_));
    return rcpp_result_gen;
END_RCPP
}
// compute_nll_gpd
double compute_nll_gpd(NumericVector y, NumericVector scale, double shape);
RcppExport SEXP gpdIcm_compute_nll_gpd(SEXP ySEXP, SEXP scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_nll_gpd(y, scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// compute_pd1_scale_nll_gpd
double compute_pd1_scale_nll_gpd(double y, double scale, double shape);
RcppExport SEXP gpdIcm_compute_pd1_scale_nll_gpd(SEXP ySEXP, SEXP scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pd1_scale_nll_gpd(y, scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// compute_pd2_scale_nll_gpd
double compute_pd2_scale_nll_gpd(double y, double scale, double shape);
RcppExport SEXP gpdIcm_compute_pd2_scale_nll_gpd(SEXP ySEXP, SEXP scaleSEXP, SEXP shapeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pd2_scale_nll_gpd(y, scale, shape));
    return rcpp_result_gen;
END_RCPP
}
// convexMinorant
NumericVector convexMinorant(NumericVector x, NumericVector y);
RcppExport SEXP gpdIcm_convexMinorant(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(convexMinorant(x, y));
    return rcpp_result_gen;
END_RCPP
}
// GreatestConvexMinorant
List GreatestConvexMinorant(NumericVector x, NumericVector y);
RcppExport SEXP gpdIcm_GreatestConvexMinorant(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(GreatestConvexMinorant(x, y));
    return rcpp_result_gen;
END_RCPP
}
